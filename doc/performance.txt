* Performance and Image Quality

The level of image compression in TurboVNC can be adjusted to balance the
(sometimes conflicting) goals of high image quality and high performance.
There are four options that control the manner in which TurboVNC compresses
images:

	Allow JPEG compression :: {:}
		If this option is enabled, then TurboVNC will use JPEG compression for
		subrectangles that have a high number of unique colors, and it will use
		indexed color subencoding for subrectangles that have a low number of
		unique colors.  If this option is disabled, then TurboVNC will select
		between indexed color or raw subencoding, depending on the size of the
		subrectangle and its color count.

	JPEG image quality :: {:}
		Lower quality levels produce grainier JPEG images with more noticeable
		compression artifacts, but lower quality levels also use less network
		bandwidth and CPU time.

	JPEG chrominance subsampling :: {:}
		When compressing an image using JPEG, the RGB pixels are first converted to
		the YCbCr colorspace, a colorspace in which each pixel is represented as a
		brightness (Y, or "luminance") value and a pair of color (Cb & Cr, or
		"chrominance") values.  After this colorspace conversion, chrominance
		subsampling can be used to discard some of the chrominance components in
		order to save bandwidth.  This works because the human eye is more
		sensitive to changes in brightness than to changes in color.  1X
		subsampling (the default in TurboVNC) retains the chrominance components
		for all pixels, and thus it provides the best image quality but also uses
		the most network bandwidth and CPU time.  2X subsampling retains the
		chrominance components for every other pixel, and 4X subsampling retains
		the chrominance components for every fourth pixel (this is typically
		implemented as 2X subsampling in both X and Y directions.)  Grayscale
		throws out all of the chrominance components, leaving only luminance.  2X
		and 4X subsampling will typically produce noticeable blurring of lines and
		other sharp features, but with photographic or other "smooth" image
		content, it may be difficult to detect any difference between 1X, 2X, and
		4X.

	Zlib compression level :: {:}
		If zlib compression is enabled, then indexed color, mono, and raw-encoded
		subrectangles will be compressed using zlib prior to transmission.  This
		decreases network bandwidth usage at the expense of increased CPU usage.
		If JPEG compression is enabled, then zlib compression is always used with
		non-JPEG subrectangles.

In the Windows and Mac/Java TurboVNC Viewers, these parameters can be adjusted
by accessing the TurboVNC Viewer Options dialog box (click on the "Options"
button in the "TurboVNC Connection" dialog box or, after connecting to the
server, click on the Connection Options button in the toolbar.)  In the X11
TurboVNC Viewer, press F8 after connecting to bring up the TurboVNC Viewer
Options menu.

The TurboVNC Viewer provides five preset "encoding methods", corresponding
to the most useful combinations of the image compression options described
above:

|| Encoding method || Allow JPEG || JPEG image quality || \
	JPEG chrominance subsampling || Zlib compression level || Notes ||
| "Tight + Perceptually Lossless JPEG" | Yes | 95 | 1x | 1 | \
	This encoding method should be perceptually lossless (that is, any image \
	compression artifacts it produces should be imperceptible to human vision) \
	under most viewing conditions.  This encoding method requires a great \
	deal of network bandwidth, however, and is generally not recommended except \
	on 50 Megabit/second and faster networks. |
| "Tight + Medium-Quality JPEG" | Yes | 80 | 2x | 1 | \
	For subrectangles that have a high number of unique colors, this encoding method \
	produces some minor, but generally not very noticeable, image compression \
	artifacts.  All else being equal, this encoding method typically uses about \
	twice the network bandwidth of the "Tight + Low-Quality JPEG" encoding \
	method and about half the bandwidth of the "Tight + Perceptually Lossless \
	JPEG" encoding method, making it appropriate for medium-speed networks such \
	as 10 Megabit Ethernet. |
| "Tight + Low-Quality JPEG" | Yes | 30 | 4x | 1 | \
	For subrectangles that have a high number of unique colors, this encoding method \
	produces very noticeable image compression artifacts.  However, it performs \
	optimally on low-bandwidth connections.  If image quality is more critical \
	than performance, then use one of the other encoding methods or take \
	advantage of the [[#LR][Lossless Refresh feature]]. |
| "Lossless Tight" | No | N/A | N/A | None | \
	This encoding method uses indexed color subencoding for subrectangles that have \
	a low number of unique colors, but it otherwise does not perform any image \
	compression at all.  Lossless Tight is thus suitable only for gigabit and faster \
	networks.  This encoding method uses significantly less CPU time than any \
	of the JPEG-based encoding methods.  Lossless Tight requires an RFB \
	protocol extension that is, as of this writing, only supported by the \
	TurboVNC Viewer. |
| "Lossless Tight + Zlib" | No | N/A | N/A | 1 | \
	This encoding method uses indexed color subencoding for subrectangles that have \
	a low number of unique colors and raw subencoding for subrectangles that have a \
	high number of unique colors.  It compresses all subrectangles using zlib \
	with zlib compression level 1.  For certain types of low-color workloads (CAD \
	applications, in particular), this encoding method may use less network \
	bandwidth than the "Tight + Perceptually Lossless JPEG" encoding method, \
	but it also uses significantly more CPU time than any of the JPEG-based \
	encoding methods. |
#CAP: TurboVNC Encoding Methods

In the Windows and Java/Mac TurboVNC Viewers, the encoding method can be set
in the TurboVNC Viewer Options dialog box (click on the "Options" button in
the "TurboVNC Connection" dialog box or, after connecting to the server, click
on the Connection Options button in the toolbar.)

With the X11 TurboVNC Viewer, the "Perceptually Lossless" encoding method is
the default (unless it has been overridden using a resource file), but the
following command-line switches can be used to specify the encoding method:

''-highqual'' = select the "Tight + Perceptually Lossless Quality JPEG"
	encoding method {nl}
''-medqual'' = select the "Tight + Medium Quality JPEG" encoding method {nl}
''-lowqual'' = select the "Tight + Low Quality JPEG" encoding method {nl}
''-lossless'' = select the "Lossless Tight" encoding method {nl}
''-losslesswan'' = select the "Lossless Tight + Zlib" encoding method {nl}

After connecting, you can also press the F8 key to pop up the TurboVNC Viewer
Options menu, from which you can select a different encoding method.

** Interframe Comparison
{anchor: InterframeComparison}

Certain ill-behaved applications can sometimes draw the same thing over and
over again, and this can cause redundant framebuffer updates to be sent to the
VNC viewer.  The TurboVNC Server can guard against this by maintaining a copy
of the remote framebuffer for each connected viewer, comparing each new
framebuffer update against the pixels in the framebuffer copy, and
discarding any redundant updates before they are sent to the viewer.

Enabling interframe comparison increases the memory usage of the TurboVNC
Server by a factor of N, where N is the number of connected clients, and
interframe comparison increases the server CPU usage by about 10-15% as well.
Further, duplicate framebuffer updates are not typically a problem for 3D and
video applications, and the effects of these duplicate updates, even when they
exist, are not typically noticeable on high-speed networks.  Thus, interframe
comparison is not enabled by default and should not generally be enabled except
on low-bandwidth networks and with applications for which it can be shown to be
beneficial.

Interframe comparison can be enabled by either passing an argument of
''-interframe'' to ''vncserver'' when starting a TurboVNC Server session or by
requesting a compression level of 5 or higher from the viewer (see below.)

** Advanced Compression Options
{anchor: AdvancedCompression}

One of the underlying principles of TurboVNC's design is to expose only the
options that provide the best performance "bang for the buck."  Thus, the
TurboVNC Viewer GUI does not normally provide any way of requesting a
compression level greater than 1.  Compression Levels 2-9 can, however, be
specified on the command line (or as a parameter, if using the Java TurboVNC
Viewer), and doing so will enable an advanced mode in the TurboVNC Viewer GUI
that allows any compression level from 0 to 9 to be requested.

When connecting to a TurboVNC server, requesting a particular compression level
has the following effect:

|| Compression level || Zlib compression level (non-JPEG subrectangles) || \
	Palette threshold || Interframe comparison || Notes ||
| 0 | 1 | 24 | No | Same as Compression Level 1.  Bypassing zlib when JPEG is \
	enabled would only reduce the CPU usage for non-JPEG subrectangles, which \
	is of limited usefulness.  Further, bypassing zlib requires an RFB protocol \
	extension that is not supported by non-TurboVNC viewers.  It is presumed \
	that, if one wants to reduce the CPU usage, then one wants to do so for all \
	subrectangles, so CL 0 without JPEG (AKA "Lossless Tight") should be used. |
| 1 | 1 | 24 | No | See the description of the "Tight + JPEG" encoding \
	methods above. |
| 2 | 3 | 96 | No | A higher palette threshold causes indexed color \
	subencoding to be used more often than with CL 1, and indexed color \
	subrectangles are compressed using a higher zlib compression level.  This \
	can provide typically 20-40% better compression than CL 1 (with a \
	commensurate increase in CPU usage) for workloads that have a low number of \
	unique colors.  However, Compression Level 2 will increase the CPU usage \
	for high-color workloads without providing significantly better \
	compression. |
| 3-4 | 3 | 96 | No | Same as Compression Level 2 (reserved for future expansion) |
| 5-6 | 1 | 24 | Yes | Same as Compression Level 1, but with interframe \
	comparison enabled |
| 7-8 | 3 | 96 | Yes | Same as Compression Level 2, but with interframe \
	comparison enabled |
| 9 | 7 | 256 | Yes | This mode is included only for backward compatibility \
	with TightVNC.  It provides approximately the same level of compression for \
	2D applications as Compression Level 9 in TightVNC 1.3.x, while using much less \
	CPU time.  It also provides much better compression than TightVNC for 3D \
	and video applications.  However, relative to Compression Level 2, this \
	mode uses approximately twice as much CPU time and only achieves about \
	10-20% better average compression for 2D apps (and has no noticeable \
	benefit for 3D and video apps.)  Thus, its usefulness is generally very \
	limited. |
#CAP: Compression Levels Supported by the TurboVNC Server (JPEG Enabled)

{:}

|| Compression Level || Zlib compression level (indexed color subrectangles) \
	|| Zlib compression level (raw subrectangles) || Palette threshold \
	|| Interframe comparison || Notes ||
| 0 | None | None | Subrectangle size / 4 | No | See the description \
	of the "Lossless Tight" encoding method above. |
| 1 | 1 | 1 | Subrectangle size / 96 | No | See the description of the \
	"Lossless Tight + Zlib" encoding method above. |
| 2-4 | 1 | 1 | Subrectangle size / 96 | No | Same as Compression Level 1 (reserved for future expansion) |
| 5 | None | None | Subrectangle size / 4 | Yes | Same as Compression Level \
	0, but with interframe comparison enabled |
| 6-8 | 1 | 1 | Subrectangle size / 96 | Yes | Same as Compression Level 1, \
	but with interframe comparison enabled |
| 9 | 7 | 5 | Subrectangle size / 96 | Yes | This mode is included only for \
	backward compatibility with TightVNC.  It provides approximately the same \
	level of compression for 2D applications as Compression Level 9 in \
	TightVNC 1.3.x, while using much less CPU time.  It also provides much better \
	compression than TightVNC for 3D and video applications.  However, relative \
	to Compression Level 1, this mode uses approximately twice as much CPU time \
	and only achieves about 10% better average compression for 2D apps (and \
	has no noticeable benefit for 3D and video apps.)  Thus, its usefulness is \
	generally very limited. |
#CAP: Compression Levels Supported by the TurboVNC Server (JPEG Disabled)

** Lossless Refresh
{anchor: LR}

Since both of TurboVNC's mathematically lossless encoding methods have
performance drawbacks, another option for image-quality-critical applications
is the "Lossless Refresh" feature.  When a lossless refresh is requested by a
TurboVNC viewer, the server will send a mathematically lossless image of the
current TurboVNC desktop to the requesting viewer.  So, for instance, a user
can rotate/pan/zoom an object in their 3D application using a very low-quality
JPEG setting, then when that user is ready to interpret or analyze the object,
they can request a lossless refresh of TurboVNC's virtual screen.

To perform a lossless refresh, press CTRL-ALT-SHIFT-L (in the Windows and
Java/Mac TurboVNC Viewers, you can also click on the Lossless Refresh toolbar
icon.)

** Automatic Lossless Refresh
{anchor: ALR}

Passing an argument of ''-alr ''__''{timeout}''__ to ''vncserver'' will
enable the automatic lossless refresh (ALR) feature for the TurboVNC
session.  ALR will monitor all of the VNC viewer connections, and if more than
__''{timeout}''__ seconds have elapsed since the last framebuffer update was
sent to a given viewer, then the TurboVNC Server will send to that viewer a
mathematically lossless copy of any "ALR-eligible" screen regions that have
been affected by lossy compression.  You can also pass arguments of
''-alrqual'' and ''-alrsamp'' to ''vncserver'' to specify that automatic
lossless refreshes should be sent using JPEG instead (see the ''Xvnc'' man page
for details.)

The ALR feature is designed mainly for use with interactive visualization
applications.  The idea is that, on a low-bandwidth connection, low-quality
JPEG can be used while the 3D scene is rotated/panned/zoomed, but when the
motion stops, a fully lossless copy of the 3D image is sent and can be studied
in detail.

The default is for any regions drawn with ''X[Shm]PutImage()'' to be
ALR-eligible, as well as any regions drawn with CopyRect, if the source of the
CopyRect operation was affected by lossy compression (CopyRect is an RFB
encoding that allows the server to request that the viewer move a rectangle of
pixels from one location to another.)  When used with VirtualGL, this means
that ALRs will mainly be sent for just the 3D screen regions.  This should be
fine for most 3D applications, since the 3D regions are the ones that are
quality-critical.  The default ALR behavior also prevents what might best be
called the "blinking cursor dilemma."  Certain ill-behaved window managers
update a small region of the taskbar continuously, even though none of the
pixels in that region have changed.  Also, certain programs have a blinking
cursor that may update more frequently than the ALR timeout.  Since an ALR is
triggered based on a period of inactivity relative to the last framebuffer
update, these continuous updates prevent an ALR from ever being sent.
Fortunately, these ill-behaved window managers and blinking cursors do not
typically use ''X[Shm]PutImage()'' to perform their updates, so the problem is
effectively worked around by limiting the ALR-eligible regions to just the
subset of regions that were drawn with ''X[Shm]PutImage()'' and CopyRect.

You can override the default ALR behavior, thus making all screen regions
eligible for ALR, by setting the ''TVNC_ALRALL'' environment variable to ''1''
on the TurboVNC server machine prior to starting a TurboVNC session.  You can
also set ''TVNC_ALRCOPYRECT'' to ''0'' to make CopyRect regions ALR-ineligible,
which approximates the behavior of TurboVNC 1.2.1 and prior.

** Multithreading
{anchor: Multithreading}

The TurboVNC Server can use multiple threads to perform image encoding and
compression, thus allowing it to take advantage of multi-core or
multi-processor systems.  The server splits the screen vertically into N tiles,
where N is the number of threads, and assigns each tile to a separate thread.
The scalability of this algorithm is nearly linear when used with demanding 3D
or video applications that fill most of the screen.  However, whether or not
multithreading improves the overall performance of TurboVNC depends largely on
the performance of the viewer and the network.  If either the viewer or the
network is the primary performance bottleneck, then multithreading the server
will not help.  It will almost certainly have no effect on networks slower than
100 Megabit Ethernet or when using the Java TurboVNC Viewer as an applet.

To enable server-side multithreading, set the ''TVNC_MT'' environment variable
to ''1'' on the server prior to starting ''vncserver''.  The default behavior
is to use as many threads as there are cores on the server machine, but you can
set the ''TVNC_NTHREADS'' environment variable to override this.

** Accelerating the Java TurboVNC Viewer

*** Accelerating JPEG Decoding
#OPT: noList! plain!

The Java TurboVNC Viewer can be used as a standalone app, in which case it
provides most of the same features as the native TurboVNC viewers.  It can also
load libjpeg-turbo through JNI to accelerate JPEG decoding, which gives the
Java viewer similar performance to the native viewers in most
cases.  If you are using the Mac TurboVNC Viewer (which is just the Java viewer
packaged in a Mac app bundle), then libjpeg-turbo is embedded in the app
bundle, so no further action is needed to accelerate it.  If you are using the
Java TurboVNC Viewer on Windows or Linux, then you will need to install one of
the [[http://www.sourceforge.net/projects/libjpeg-turbo/files][official libjpeg-turbo packages]]
(version 1.3.0 or later) in order to accelerate JPEG decoding.  Install the
appropriate version of libjpeg-turbo (32-bit or 64-bit) to match your JRE.  If
you are launching the Java TurboVNC Viewer from the command line, then it will
print a warning if it is unable to load libjpeg-turbo.  Otherwise, if you are
launching the viewer from an icon, you can verify whether libjpeg-turbo has
been loaded by opening the "Connection info" dialog (after the connection to
the server has been established) and verifying that the "JPEG decompression"
field says "Turbo".

*** Accelerating X11 Blitting
#OPT: noList! plain!

When running the Java TurboVNC Viewer on Un*x platforms, it is necessary to
enable MIT-SHM Pixmap support in order to achieve optimal blitting (image
drawing) performance.  MIT-SHM Pixmaps are not always enabled by default on
certain graphics cards (some nVidia cards, for instance), and in such cases, it
may be necessary to add an entry to __xorg.conf__ in order to enable them.
You can verify whether X11 blitting is being accelerated by running

	#Verb: <<---
	java -Dsun.java2d.trace=count -cp /opt/TurboVNC/java/VncViewer.jar com.turbovnc.vncviewer.ImageDrawTest
	---

Let the benchmark run for 15 or 20 seconds, then abort it with CTRL-C.  If you
notice in the Java 2D trace output that there are no calls to
''sun.java2d.x11.X11PMBlitLoops::Blit()'', then blitting is not being
accelerated, and the most likely reason is that MIT-SHM Pixmaps are not
enabled.

	!!! Sometimes the benchmark will report that the graphics device supports H/W
	acceleration even when it doesn't.  This is due to a bug in Java 2D.  Thus,
	looking at the trace output is the only reliable way to determine whether or
	not X11 blitting is being accelerated.

Even with accelerated X11 blitting, the Java TurboVNC Viewer may not be quite
as fast as the X11 TurboVNC Viewer on older, slower systems.  This is because
image drawing in Java 2D requires an extra memory copy that is not required
when using raw X11 commands.  However, on newer systems with fast memory access
(particularly systems with a large L2 or L3 cache), this overhead should have a
negligible impact on overall performance.

*** Using the Server VM
#OPT: noList! plain!

Passing an argument of ''-server'' to ''java'' when launching the Java TurboVNC
Viewer is recommended.  This enables the adaptive compiler, which performs
aggressive code optimizations and actually learns how to better optimize a
piece of code the more times it encounters it.  Such optimizations greatly
improve the decoding performance for non-JPEG subrectangles.  If using the Mac
TurboVNC Viewer app, then the Server VM is automatically enabled.

*** Java Web Start
#OPT: noList! plain!

Java Web Start can be used to deploy the Java TurboVNC Viewer and the
associated libjpeg-turbo JNI libraries from a web server.  Deploying the viewer
using JWS provides a fully functional and performant TurboVNC Viewer
environment without requiring the viewer to be installed on the client machine.
This mechanism is preferred over deploying the viewer as an applet, since JPEG
decoding cannot be accelerated when the Java TurboVNC Viewer is run as an
applet.  See [[http://www.TurboVNC.org/Documentation/JWS]] for more details.
